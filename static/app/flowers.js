var flowers = angular.module('flowers', []);

flowers.service('CurrentFlowers', function() {
  this.flowers = []
  this.push = function(flower) {
    flowers.push(flower)
  }
})

flowers.factory('Colorize', function() {
    
  var Colorize = function(initialColor) {
    var startColor = '#B23636';
    this.color = tinycolor(startColor)
    this.hsl = this.color.toHsl();
    this.applyColor();
  }
  
  Colorize.prototype.applyColor = function(hue) {
    if (hue != undefined) {
       this.hsl.h = hue;
       this.color = tinycolor(this.hsl);
       this.hsl = this.color.toHsl();
    }
    
    var scheme = new ColorScheme;
    scheme
      .from_hue(this.hsl.h)
      .scheme('analogic')
      .variation('hard');

    var colors = scheme.colors();
    this.colors = colors.slice(0,6);
  }
  
  Colorize.prototype.getColor = function(i) {
    if (this.hsl.h > 50 && this.hsl.h < 160) {
        var y = 10 * Math.pow(Math.E, -1 * ( Math.pow(this.hsl.h - 110, 2) / 600 ) );
        var c = tinycolor(this.colors[i % this.colors.length]);
        this.colors[i % this.colors.length] = tinycolor.darken(c, y).toHex();
    }
    
    return this.colors[i % this.colors.length]
  }
  
  return Colorize;

})

flowers.controller('LettersCtrl', function($scope, AlphabetIndex) {
  $scope.letters =  ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
})

/*flowers.directive('hueSlider', function() {
  return {
    restrict: "A",
    replace: true,
    template: '<span><div class="hue-slider" style="width: 260px"></div>{{colorize}}</span>',
    link: function(scope, element, attrs) {
      
      jQuery(element).noUiSlider({
                  range: [0, 360],
                  start: 0,
                  handles: 1,
                  behaviour: 'extend-tap',
                  slide: function() {
                      var value = $(this).val();
                      render.applyPalette(value);
                  },
                  set: function () {
                      render.setUrlParam('color', render.color.toHex());
                  }
              });
    
    }
  }
})
*/
flowers.directive('flower', function ($compile, AlphabetIndex, Alphabet, Colorize) {
  
  var getTemplate = function(word, h, downpart) {
    var colorize = new Colorize()
    if (h && typeof h == 'number') colorize.applyColor(h*55.5 % 255);

    var template = '';
    template += '<svg ng-controller="FlowerCtrl" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="2004px" height="2004px" viewBox="0 0 2004 2004" enable-background="new 0 0 2004 2004" xml:space="preserve" style="display: inline;">'
    
    template += '<defs> \
      <linearGradient id="grad1" x1="0%" y1="0%" x2="0%" y2="100%"> \
        <stop offset="0%" style="stop-color:lightgreen;stop-opacity:1" /> \
        <stop offset="70%" style="stop-color:lightgreen;stop-opacity:1" /> \
        <stop offset="100%" style="stop-color:lightgreen;stop-opacity:0" /> \
        </linearGradient> \
        </defs>';
  
    if (downpart) template += '<rect width="160" height="1002" x="922" y="1002" fill="url(#grad1)" />'
  
    template += '<g><circle cx="1002" cy="1002" r="400" stroke="black" stroke-width="0" fill="lightgreen" /></g>'
    template += '<g>'

    if (word) {
      for (val in AlphabetIndex) {
        var letter = AlphabetIndex[val]
        if (word.indexOf(AlphabetIndex[val]) > -1) {
          template += '<path d="'+ Alphabet[letter] +'"'
          if (h && typeof h == 'string') template += 'fill="'+h
          else template += 'fill="#'+colorize.getColor(word.indexOf(letter))
          template += '"></path>'
        }
      }
    }
    template += '</g>'
    template += '</svg>'

    return template;
  };

  return {
    restrict: "A",
    scope: {word: "=flower", h:"=", downpart:"="},
    transclude: true,
    link: function(scope, element, attrs) {
      element.html(getTemplate(scope.word, scope.h, scope.downpart))
      $compile(element.contents())(scope);

      scope.$watchCollection('word', function (word) {
        element.html(getTemplate(word, scope.h, scope.downpart))
        $compile(element.contents())(scope);
      });
    }
  };
});

flowers.controller('FlowerCtrl', function($scope, Colorize) {
})
flowers.constant('AlphabetIndex', ['s', 'x', 'n', 'z', 'w', 'b', 'p', 'm', 'g', 'v', 'd', 'o', 'c', 'u', 'i', 't', 'k', 'h', 'q', 'r', 'j', 'y', 'l', 'f', 'e', 'a']);
flowers.constant('Alphabet', {
  s:'M1202,73.1c364.1,78,650.9,364.7,728.9,728.9H1202V73.1z M802,802V73.1C437.9,151.1,151.1,437.9,73.1,802H802z M802,1202  H73.1c78,364.1,364.7,650.9,728.9,728.9V1202z M1202,1202v728.9c364.1-78,650.9-364.7,728.9-728.9H1202z',
  x:'M1868,502l0,1000c0,0,0,0,0,0l-866,500L136,1502l0-1000c0,0,0,0,0,0L1002,2c0,0,0,0,0,0L1868,502z M1502,1001.9  c0-234.7,158.8-379.5,365.8-499.8c-204.6,118.6-412.6,184.1-615.8,66.8C1049,451.8,1002.8,241.5,1002,2.5  c0.3,236.1-47.1,449.4-250.1,566.5c-203,117.2-408.4,51.9-615.8-67C340.8,619.9,502,767.6,502,1002.1  c0,234.4-159.1,379.5-365.6,499.6c204.3-118.3,412.7-183.9,615.7-66.7c203.3,117.4,249.3,327.3,250,566.8  c-0.4-236.5,46.7-449.5,250-566.9c202.9-117.1,408.2-52,615.5,66.7C1663,1383.9,1502,1236.2,1502,1001.9z M135.8,501.9 M152,1502  L152,1502L152,1502L152,1502L152,1502z M152,1502L152,1502L152,1502L152,1502L152,1502z', 
  n:'M1601.5,603.4c-163.5,0-304,98-366.1,238.5c-11.2,16.8-22.2,37.4-35.1,50.6c-12.7,13-27.2,26.4-45.1,32.8  c-19.6,7-46.4-0.5-59.9-14.2c-13.7-13.4-21.2-40.3-14.2-59.9c6.4-18,19.8-32.4,32.8-45.1c14.7-14.3,38.8-26.5,56.3-39  c5.3-3.7,10.5-7.4,15.7-11c36.3-18.9,69.3-43.2,98-71.9c1.6-1.4,3.2-2.7,4.8-4.1c6.6-6,21.8-20.4,35.9-43.5  c48.1-66,76.6-147.4,76.6-235.3C1401.3,180.4,1223,2,1002,2c-221,0-400.9,178.4-400.9,399.3c0,157.5,91,293.7,223.3,358.9  c3.3,2.3,6.6,4.5,9.9,6.9c17.6,12.5,41.6,24.6,56.3,39c13,12.7,26.4,27.2,32.8,45.1c7,19.6-0.5,46.4-14.2,59.9  c-13.4,13.7-40.3,21.2-59.9,14.2c-18-6.4-32.5-19.8-45.2-32.8c-14.3-14.7-26.5-38.8-39-56.3c-0.6-0.9-1.2-1.7-1.8-2.5  c-63.9-135.9-202.1-230-362.2-230C180.3,603.6,2,781,2,1002c0,220.9,178.3,401.6,399.3,401.6c158.9,0,296.2-92.6,360.7-226.9  c1.1-1.6,2.2-3.1,3.3-4.7c12.5-17.6,24.6-41.6,39-56.3c12.7-13,27.2-26.4,45.2-32.8c19.6-7,46.4,0.5,59.9,14.2  c13.7,13.4,21.2,40.3,14.2,59.9c-6.4,18-19.8,32.4-32.8,45.2c-10.8,10.5-26.5,19.8-41.1,29c-145.7,59.8-248.3,203-248.3,370.2 c0,220.9,179.7,400.7,400.6,400.7c221,0,399.6-179.8,399.6-400.7c0-165.1-100-306.9-242.8-368c-15.5-9.9-33-19.9-44.7-31.2  c-13.1-12.7-26.4-27.2-32.8-45.2c-7-19.6,0.5-46.4,14.2-59.9c13.4-13.7,40.3-21.2,59.9-14.2c18,6.4,32.4,19.8,45.1,32.8  c13.5,13.9,25.1,36,36.9,53.2c63,138.3,202.4,234.4,364.3,234.4c220.9,0,400.5-180.5,400.5-401.4  C2002,781.1,1822.5,603.4,1601.5,603.4z M402,1202c-110.5,0-200-89.5-200-200c0-110.5,89.5-200,200-200s200,89.5,200,200  C602,1112.5,512.5,1202,402,1202z M1202,1602c0,110.5-89.5,200-200,200s-200-89.5-200-200c0-110.5,89.5-200,200-200  S1202,1491.5,1202,1602z M1002,602c-110.5,0-200-89.5-200-200c0-110.5,89.5-200,200-200s200,89.5,200,200  C1202,512.5,1112.5,602,1002,602z M1602,1202c-110.5,0-200-89.5-200-200c0-110.5,89.5-200,200-200c110.5,0,200,89.5,200,200  C1802,1112.5,1712.5,1202,1602,1202z',
  z:'M1202,175.7c308.8,74.5,551.9,317.5,626.3,626.3H1202V175.7z M802,802V175.7C493.2,250.1,250.1,493.2,175.7,802H802z   M1202,1202v626.3c308.8-74.5,551.9-317.5,626.3-626.3H1202z M802,1202H175.7c74.5,308.8,317.5,551.9,626.3,626.3V1202z', 
  w:'M1010.5,157l719.4,415.3c-159.6,68.5-320.3,87.7-478-3.4C1094.1,477.8,1031.1,330.4,1010.5,157z M1502,1001.9  c0,181.8,97,311.5,236.1,415.5l0-830.8C1598,691.2,1502,819.4,1502,1001.9z M502,1002c0-181.9-97-311.5-236-415.6l0,830.6  C405.8,1312.6,502,1184.3,502,1002z M752.1,1435c-157.5-90.9-318.3-71.8-477.9-3.4L993.6,1847  C973.1,1673.5,910.1,1526.3,752.1,1435z M751.9,569c157.5-90.9,221.3-239.8,241.9-412.2L274.5,572.1  C435,640.9,594.2,660.1,751.9,569z M1252,1434.9c-157.8,91.1-221.5,239.7-241.9,412.3l719.4-415.4  C1569.1,1363,1409.8,1343.8,1252,1434.9z', 
  b:'M1002,752c193.3,0,350-156.7,350-350c0-193.3-156.7-350-350-350S652,208.7,652,402C652,595.3,808.7,752,1002,752z   M1002,252c82.8,0,150,67.2,150,150s-67.2,150-150,150s-150-67.2-150-150S919.2,252,1002,252z M402,652c-193.3,0-350,156.7-350,350  c0,193.3,156.7,350,350,350c193.3,0,350-156.7,350-350C752,808.7,595.3,652,402,652z M402,1152c-82.8,0-150-67.2-150-150  c0-82.8,67.2-150,150-150c82.8,0,150,67.2,150,150C552,1084.8,484.8,1152,402,1152z M1602,652c-193.3,0-350,156.7-350,350  c0,193.3,156.7,350,350,350c193.3,0,350-156.7,350-350C1952,808.7,1795.3,652,1602,652z M1602,1152c-82.8,0-150-67.2-150-150  c0-82.8,67.2-150,150-150c82.8,0,150,67.2,150,150C1752,1084.8,1684.8,1152,1602,1152z M1002,1252c-193.3,0-350,156.7-350,350  c0,193.3,156.7,350,350,350s350-156.7,350-350C1352,1408.7,1195.3,1252,1002,1252z M1002,1752c-82.8,0-150-67.2-150-150  c0-82.8,67.2-150,150-150s150,67.2,150,150C1152,1684.8,1084.8,1752,1002,1752z', 
  p:'M1002,202c-441.8,0-800,358.2-800,800c0,441.8,358.2,800,800,800c441.8,0,800-358.1,800-800  C1802,560.2,1443.8,202,1002,202z M1002,1652c-359,0-650-291-650-650c0-359,291-650,650-650c359,0,650,291,650,650  C1652,1361,1361,1652,1002,1652z', 
  m:'M1352,1652l-350,350l-350-350v-200l350,350l350-350V1652z M1752,1252l250-250l-250-250h-200l250,250l-250,250H1752z   M652,552l350-350l350,350V352L1002,2L652,352V552z M452,1252l-250-250l250-250H252L2,1002l250,250H452z', 
  g:'M1352,1452l-350,350l-350-350v-200H452l-250-250l250-250h200V552l350-350l350,350v200l-350-350l-600,600l600,600l350-350  V1452z M1602,1002l-250,250h200l250-250l-250-250h-200L1602,1002z', 
  v:'M1002,302c-386.6,0-700,313.4-700,700c0,386.6,313.4,700,700,700c386.6,0,700-313.4,700-700  C1702,615.4,1388.6,302,1002,302z M1002,1502c-276.1,0-500-223.9-500-500c0-276.1,223.9-500,500-500s500,223.9,500,500  C1502,1278.1,1278.1,1502,1002,1502z', 
  d:'M1725,1202c-70,253.4-269.6,453.1-523,523v-523H1725z M1202,802h523c-70-253.4-269.6-453.1-523-523V802z M802,802V279  c-253.4,70-453.1,269.6-523,523H802z M802,1202H279c70,253.4,269.6,453.1,523,523V1202z', 
  o:'M1002,402c-331.4,0-600,268.6-600,600c0,331.4,268.6,600,600,600c331.4,0,600-268.6,600-600  C1602,670.6,1333.4,402,1002,402z M1002,1352c-193.3,0-350-156.7-350-350s156.7-350,350-350c193.3,0,350,156.7,350,350  S1195.3,1352,1002,1352z', 
  c:'M1202,402c0,110.5-89.5,200-200,200s-200-89.5-200-200c0-110.5,89.5-200,200-200S1202,291.5,1202,402z M1002,1402  c-110.5,0-200,89.5-200,200c0,110.5,89.5,200,200,200s200-89.5,200-200C1202,1491.5,1112.5,1402,1002,1402z M1602,802  c-110.5,0-200,89.5-200,200c0,110.5,89.5,200,200,200c110.5,0,200-89.5,200-200C1802,891.5,1712.5,802,1602,802z M402,802  c-110.5,0-200,89.5-200,200c0,110.5,89.5,200,200,200s200-89.5,200-200C602,891.5,512.5,802,402,802z', 
  u:'M1002,502c-276.2,0-500,223.9-500,500c0,276.1,223.8,500,500,500c276.2,0,500-223.8,500-500  C1502,725.9,1278.2,502,1002,502z M1002,1202c-110.5,0-200-89.5-200-200c0-110.5,89.5-200,200-200c110.5,0,200,89.5,200,200  C1202,1112.5,1112.5,1202,1002,1202z', 
  i:'M1002,402l-600,600l600,600l600-600L1002,402z M1002,1402l-400-400l400-400l400,400L1002,1402z', 
  t:'M1725,1202c-70,253.4-269.6,453.1-523,523v-264.6c115.3-50.4,208-143.1,258.4-258.4H1725z M1202,543.6  c115.3,50.4,208,143,258.4,258.4H1725c-70-253.4-269.6-453.1-523-523V543.6z M543.6,802C594,686.7,686.7,594,802,543.6V279  c-253.4,70-453.1,269.6-523,523H543.6z M802,1460.4C686.7,1410,594,1317.3,543.6,1202H279c70,253.4,269.6,453.1,523,523V1460.4z', 
  k:'M1002,452C1002,452,1002,452,1002,452L525.7,727c0,0,0,0,0,0l0,550l476.3,275l476.3-275c0,0,0,0,0,0l0-550L1002,452z   M1348.4,1202C1348.4,1202,1348.4,1202,1348.4,1202L1002,1402l-346.4-200l0-400c0,0,0,0,0,0L1002,602c0,0,0,0,0,0l346.4,200  L1348.4,1202z', 
  h:'M1152,402c0,82.8-67.2,150-150,150c-82.8,0-150-67.2-150-150s67.2-150,150-150C1084.8,252,1152,319.2,1152,402z M1002,1452  c-82.8,0-150,67.2-150,150c0,82.8,67.2,150,150,150c82.8,0,150-67.2,150-150C1152,1519.2,1084.8,1452,1002,1452z M1602,852  c-82.8,0-150,67.2-150,150c0,82.8,67.2,150,150,150c82.8,0,150-67.2,150-150C1752,919.2,1684.8,852,1602,852z M402,852  c-82.8,0-150,67.2-150,150c0,82.8,67.2,150,150,150c82.8,0,150-67.2,150-150C552,919.2,484.8,852,402,852z', 
  q:'M1202,279c253.4,70,453.1,269.6,523,523h-157.2c-60.3-170.5-195.4-305.6-365.9-365.9V279z M436.1,802  C496.4,631.5,631.5,496.4,802,436.1V279c-253.4,70-453.1,269.6-523,523H436.1z M802,1567.9c-170.5-60.3-305.6-195.4-365.9-365.9  H279c70,253.4,269.6,453.1,523,523V1567.9z M1567.9,1202c-60.3,170.5-195.4,305.6-365.9,365.9V1725c253.4-70,453.1-269.6,523-523  H1567.9z', 
  r:'M1002,602c-220.9,0-400,179.1-400,400c0,220.9,179.1,400,400,400c220.9,0,400-179.1,400-400  C1402,781.1,1222.9,602,1002,602z M1002,1102c-55.2,0-100-44.8-100-100c0-55.2,44.8-100,100-100c55.2,0,100,44.8,100,100  C1102,1057.2,1057.2,1102,1002,1102z', 
  j:'M1348.4,802l0,400c0,0,0,0,0,0L1002,1402l-346.4-200l0-400c0,0,0,0,0,0L1002,602c0,0,0,0,0,0L1348.4,802z', 
  y:'M444.4,623.8L953.3,330c-37.2,97.6-99.8,180.3-201.3,238.9C650,627.8,547.5,640.7,444.4,623.8z M752.1,1435  c-101.6-58.6-204.5-71.5-307.6-54.9L953.6,1674C916.6,1576.3,854.2,1494,752.1,1435z M502,1002c0-117.3-40.3-212.8-106.2-293.8  l0,587.6C461.9,1215,502,1119.8,502,1002z M1559.6,1380.1c-103.1-16.8-205.6-4-307.5,54.8c-101.8,58.7-164.4,141.5-201.5,239.1  L1559.6,1380.1z M1502,1001.9c0,117.3,40.4,212.8,106.3,293.8l0-587.8C1542.1,788.7,1502,884,1502,1001.9z M1251.9,568.9  c101.7,58.7,204.7,71.6,307.8,55L1050.7,330C1087.6,427.7,1150,510,1251.9,568.9z', 
  l:'M1002,602l-400,400l400,400l400-400L1002,602z M1002,1202l-200-200l200-200l200,200L1002,1202z', 
  f:'M1202,1002l-200,200l-200-200l200-200L1202,1002z', 
  e:'M1202,1002c0,110.5-89.6,200-200,200c-110.5,0-200-89.5-200-200c0-110.5,89.5-200,200-200C1112.4,802,1202,891.5,1202,1002  z', 
  a:'M1102,1602c0,55.2-44.8,100-100,100c-55.2,0-100-44.8-100-100c0-55.2,44.8-100,100-100C1057.2,1502,1102,1546.8,1102,1602z   M1602,902c-55.2,0-100,44.8-100,100c0,55.2,44.8,100,100,100c55.2,0,100-44.8,100-100C1702,946.8,1657.2,902,1602,902z M1002,302  c-55.2,0-100,44.8-100,100c0,55.2,44.8,100,100,100c55.2,0,100-44.8,100-100C1102,346.8,1057.2,302,1002,302z M402,902  c-55.2,0-100,44.8-100,100c0,55.2,44.8,100,100,100c55.2,0,100-44.8,100-100C502,946.8,457.2,902,402,902z'
})

flowers.service('Flowers', function() {
  var flowers = [];
  this.get = function() {
    return flowers;
  }
  this.add = function(flower) {
    flower_s = flower.join('')
    if (flowers.indexOf(flower_s) < 0)
      flowers.push(flower_s);
  }
})


flowers.controller('CurrentCtrl', function($scope, Flowers, $filter, Alphabet, CurrentFlowers) {
  $scope.trigger = function(letter) { $scope.current = $scope.current + letter}
  $scope.flowers = CurrentFlowers.flowers;
  $scope.alphabet = Alphabet
  $scope.current = '';
  $scope.word = [];
  
  var new_word = function(current) {
    //var current = $filter('tidy')(new_current)
    var words = current
      .toLowerCase()
      .replace(new RegExp("\ +", 'g')," ")
      .split(' ');

    $scope.flowers = [];

    angular.forEach(words, function(word, word_n) {
      $scope.flowers[word_n] = []
      angular.forEach(word.split(''), function(letter, letter_n) {
        if ($scope.flowers[word_n].indexOf(letter) < 0) $scope.flowers[word_n].push(letter)
      })
    })

  }
  
  $scope.save = function() {
    $scope.flowers.push($scope.word);
  }
  
  $scope.$watch('current', new_word);

})

flowers.filter('tidy', function() {
  return function(s) {
    if (!s) return "";
        var r = s.toLowerCase();
        r = r.replace(new RegExp("\\s", 'g'),"");
        r = r.replace(new RegExp("\\W", 'g'),"");
        r = r.replace(new RegExp("[^a-z]", 'g'),"");
        return r;
    }
})


flowers.directive('ngEnter', function () {
  return function (scope, elm, attrs) {
    elm.bind('keypress', function (e) {
      var intKey = (window.Event) ? e.which : e.keyCode;
      if (intKey === 13) {
        scope.$apply(attrs.ngEnter);
      }
    });
  };
});